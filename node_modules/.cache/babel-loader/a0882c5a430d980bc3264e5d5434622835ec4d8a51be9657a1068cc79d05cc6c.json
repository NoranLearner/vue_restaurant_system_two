{"ast":null,"code":"import Navbar from '@/components/header/Navbar.vue';\n\n// import { mapActions, mapMutations } from 'vuex';\n\n// import axios from 'axios';\n\n// // For validate data\n\n// import useValidate from \"@vuelidate/core\";\n\n// import { required, minLength, maxLength } from \"@vuelidate/validators\";\n\nexport default {\n  name: 'UpdateCategory',\n  data() {\n    return {\n      // userId: '',\n      // userName: '',\n      locationId: this.$route.params.locationId,\n      locName: ''\n      // locAddress: '',\n      // name: \"\",\n      // successMessage: \"\",\n      // errorMessage: \"\",\n      // v$: useValidate(),\n      // listOfUserCategories: [],\n    };\n  },\n  /* mounted() {\n      let user = localStorage.getItem(\"user_info\");\n      if (user) {\n          this.userId = JSON.parse(user).id;\n          this.userName = JSON.parse(user).name;\n          this.CanUserAccessThisLocation({ userIdIs: this.userId, locationIdIs: this.locationId, redirectToPage: \"home\" });\n          this.getLocationInfo(this.userId, this.locationId);\n          this.displayUserCategories(this.userId, this.locationId);\n      }\n      else {\n          // Redirect to Sign Up page\n          this.redirectTo({ val: 'signup' });\n      }\n  }, */\n\n  /* validations() {\n      return {\n          name: { required, minLength: minLength(3), maxLength: maxLength(15) },\n      }\n  }, */\n\n  components: {\n    Navbar\n  }\n\n  /* methods: {\n      ...mapActions(['redirectTo']),\n      ...mapMutations(['CanUserAccessThisLocation']),\n      async getLocationInfo(userId, locationId) {\n          let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n          let locDetails = [];\n          if (result.status == 200 && result.data.length > 0) {\n              locDetails = result.data;\n              this.locName = locDetails[0].name;\n              this.locAddress = locDetails[0].address;\n          }\n      },\n      async addCategory() {\n          // Activate Validation\n          this.v$.$validate();\n          // For Not Duplicate Category\n          let filterCategoryName = this.listOfUserCategories.filter((v) => v.name.toLocaleLowerCase() == this.name.toLocaleLowerCase());\n          if (!this.v$.$error) {\n              if (filterCategoryName.length > 0) {\n                  this.errorMessage = 'Category Name already exists, Try Another Name';\n                  this.successMessage = '';\n              } else {\n                  let result = await axios.post(`http://localhost:3000/categories`, {\n                      name: this.name,\n                      userId: this.userId,\n                      // locationId: parseInt(this.locationId),\n                      locationId: this.locationId,\n                  });\n                  if (result.status == 201) {\n                      this.errorMessage = '';\n                      this.successMessage = 'Added New Category Successfully';\n                      setTimeout(() => {\n                          this.$router.push({ name: \"ViewCategories\", params: { locationId: this.locationId } });\n                      }, 2000);\n                  } else {\n                      this.successMessage = '';\n                      this.errorMessage = 'Something went wrong, Try Again';\n                  }\n              }\n          } else {\n              this.successMessage = '';\n              this.errorMessage = 'You must fill in category name';\n          }\n      },\n      async displayUserCategories(userId, locationId) {\n          let result = await axios.get(`http://localhost:3000/categories?userId=${this.userId}&locationId=${this.locationId}`);\n          // let categoryDetails = [];\n          if (result.status == 200) {\n              // categoryDetails = result.data;\n              // console.log(categoryDetails);\n              this.listOfUserCategories = result.data;\n              console.log(this.listOfUserCategories);\n          }\n      }\n  }, */\n};","map":{"version":3,"names":["Navbar","name","data","locationId","$route","params","locName","components"],"sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/menu/UpdateCategory.vue"],"sourcesContent":["<template>\n\n    <div class=\"container\">\n\n        <Navbar />\n\n        <router-link :to=\"{ name: 'ViewCategories', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-secondary float-start\">Back To Category</button>\n        </router-link>\n\n        <router-link :to=\"{ name: 'Menu', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-light float-end\">Back To Menu</button>\n        </router-link>\n\n        <div class=\"clearfix\"></div>\n\n        <div class=\"text-center\">\n            <h1>{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div>\n\n        <!-- Add New Category Form -->\n\n        <!-- <form @click.prevent>\n\n            <h1 class=\"text-center\">Add New Category</h1>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Category Name\" v-model.trim=\"name\">\n                    <span class=\"text-danger\" v-if=\"v$.name.$error\">{{ v$.name.$errors[0].$message }}</span>\n                </div>\n            </div>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length > 0\">\n                    {{ successMessage }}\n                </div>\n                <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length > 0\">\n                    {{ errorMessage }}\n                </div>\n            </div>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <button type=\"button\" @click=\"addCategory()\" class=\"btn btn-success\">Add Now</button>\n                </div>\n            </div>\n\n        </form> -->\n\n    </div>\n\n</template>\n\n<script>\n\nimport Navbar from '@/components/header/Navbar.vue';\n\n// import { mapActions, mapMutations } from 'vuex';\n\n// import axios from 'axios';\n\n// // For validate data\n\n// import useValidate from \"@vuelidate/core\";\n\n// import { required, minLength, maxLength } from \"@vuelidate/validators\";\n\nexport default {\n\n    name: 'UpdateCategory',\n\n    data() {\n        return {\n            // userId: '',\n            // userName: '',\n            locationId: this.$route.params.locationId,\n            locName: '',\n            // locAddress: '',\n            // name: \"\",\n            // successMessage: \"\",\n            // errorMessage: \"\",\n            // v$: useValidate(),\n            // listOfUserCategories: [],\n        }\n    },\n\n    /* mounted() {\n        let user = localStorage.getItem(\"user_info\");\n        if (user) {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            this.CanUserAccessThisLocation({ userIdIs: this.userId, locationIdIs: this.locationId, redirectToPage: \"home\" });\n            this.getLocationInfo(this.userId, this.locationId);\n            this.displayUserCategories(this.userId, this.locationId);\n        }\n        else {\n            // Redirect to Sign Up page\n            this.redirectTo({ val: 'signup' });\n        }\n    }, */\n\n    /* validations() {\n        return {\n            name: { required, minLength: minLength(3), maxLength: maxLength(15) },\n        }\n    }, */\n\n    components: {\n        Navbar,\n    },\n\n    /* methods: {\n        ...mapActions(['redirectTo']),\n        ...mapMutations(['CanUserAccessThisLocation']),\n        async getLocationInfo(userId, locationId) {\n            let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n            let locDetails = [];\n            if (result.status == 200 && result.data.length > 0) {\n                locDetails = result.data;\n                this.locName = locDetails[0].name;\n                this.locAddress = locDetails[0].address;\n            }\n        },\n        async addCategory() {\n            // Activate Validation\n            this.v$.$validate();\n            // For Not Duplicate Category\n            let filterCategoryName = this.listOfUserCategories.filter((v) => v.name.toLocaleLowerCase() == this.name.toLocaleLowerCase());\n            if (!this.v$.$error) {\n                if (filterCategoryName.length > 0) {\n                    this.errorMessage = 'Category Name already exists, Try Another Name';\n                    this.successMessage = '';\n                } else {\n                    let result = await axios.post(`http://localhost:3000/categories`, {\n                        name: this.name,\n                        userId: this.userId,\n                        // locationId: parseInt(this.locationId),\n                        locationId: this.locationId,\n                    });\n                    if (result.status == 201) {\n                        this.errorMessage = '';\n                        this.successMessage = 'Added New Category Successfully';\n                        setTimeout(() => {\n                            this.$router.push({ name: \"ViewCategories\", params: { locationId: this.locationId } });\n                        }, 2000);\n                    } else {\n                        this.successMessage = '';\n                        this.errorMessage = 'Something went wrong, Try Again';\n                    }\n                }\n            } else {\n                this.successMessage = '';\n                this.errorMessage = 'You must fill in category name';\n            }\n        },\n        async displayUserCategories(userId, locationId) {\n            let result = await axios.get(`http://localhost:3000/categories?userId=${this.userId}&locationId=${this.locationId}`);\n            // let categoryDetails = [];\n            if (result.status == 200) {\n                // categoryDetails = result.data;\n                // console.log(categoryDetails);\n                this.listOfUserCategories = result.data;\n                console.log(this.listOfUserCategories);\n            }\n        }\n    }, */\n\n}\n\n</script>\n\n<style lang=\"scss\" scoped></style>"],"mappings":"AA+DA,OAAOA,MAAK,MAAO,gCAAgC;;AAEnD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,eAAe;EAEXC,IAAI,EAAE,gBAAgB;EAEtBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACH;MACA;MACAC,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,UAAU;MACzCG,OAAO,EAAE;MACT;MACA;MACA;MACA;MACA;MACA;IACJ;EACJ,CAAC;EAED;;;;;;;;;;;;;;;EAeA;;;;;;EAMAC,UAAU,EAAE;IACRP;EACJ;;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}