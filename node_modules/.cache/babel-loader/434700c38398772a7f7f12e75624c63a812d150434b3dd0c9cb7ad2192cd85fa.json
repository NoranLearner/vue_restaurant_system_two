{"ast":null,"code":"import Navbar from '@/components/header/Navbar.vue';\n\n// For redirect to links\nimport { mapActions, mapState, mapMutations } from \"vuex\";\n\n// To Use HTTP Request\nimport axios from \"axios\";\n\n// // For validate data\n// import useValidate from \"@vuelidate/core\";\n// import { required, minLength, maxLength, between } from \"@vuelidate/validators\";\n\nexport default {\n  name: 'AddNewItem',\n  data() {\n    return {\n      locationId: this.$route.params.locationId,\n      userId: \"\",\n      userName: '',\n      locName: \"\",\n      locAddress: \"\",\n      itemName: \"\"\n    };\n  },\n  mounted() {\n    let user = localStorage.getItem(\"user_info\");\n    if (user) {\n      this.userId = JSON.parse(user).id;\n      this.userName = JSON.parse(user).name;\n      this.getLocationInfo(this.userId, this.locationId);\n    } else {\n      // Redirect to Sign Up page\n      this.redirectTo({\n        val: 'signup'\n      });\n    }\n  },\n  components: {\n    Navbar\n  },\n  methods: {\n    ...mapActions(['redirectTo']),\n    async getLocationInfo(userId, locationId) {\n      let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locationId}`);\n      let locDetails = [];\n      if (result.status == 200) {\n        locDetails = result.data;\n        if (locDetails.length > 0) {\n          this.locName = locDetails[0].name;\n          this.locAddress = locDetails[0].address;\n        }\n      }\n    }\n  }\n\n  // data() {\n  //     return {\n  //         v$: useValidate(),\n  //         \n  //         itemPrice: \"\",\n  //         itemsQty: 1,\n  //         description: \"\",\n  //         pickedCategory: \"\",\n  //         successMessage: \"\",\n  //         errorMessage: \"\",\n  //     }\n  // },\n\n  // validations() {\n  //     return {\n  //         itemName: { required, minLength: minLength(6) },\n  //         itemPrice: { required, between: between(0,1000000) },\n  //         itemsQty: { required, between: between(1,100000) },\n  //         description: { required, minLength: minLength(6), maxLength: maxLength(120) },\n  //         pickedCategory: { required },\n  //     }\n  // },\n\n  // computed: {\n  //     ...mapState([\n  //         \"isUserLoggedIn\",\n  //         \"LoggedInUserId\",\n  //         \"numOfCategories\",\n  //         \"listOfCategories\"\n  //     ]),\n  // },\n\n  // async mounted() {\n  //         this.isLoggedInUser();\n  //         this.displayAllCategories({\n  //             userIdIs: this.userId,\n  //             locationIdIs: this.locationId\n  //         });\n  //         this.canUserAccessThisLocation({\n  //             userIdIs: this.userId,\n  //             locationIdIs: this.locationId,\n  //             redirectToPage: \"home\",\n  //         });\n  // },\n\n  // methods: {\n  //     ...mapMutations([\n  //         \"isLoggedInUser\",\n  //         \"displayAllCategories\",\n  //         \"canUserAccessThisLocation\"\n  //     ]),\n\n  //     async addNewItem() {\n\n  //         // Activate Validation\n  //         this.v$.$validate();\n\n  //         if (!this.v$.$error) {\n\n  //             let result = await axios.post(`http://localhost:3000/items`, {\n  //                 name: this.itemName,\n  //                 // \"17.00\"\n  //                 price: parseFloat(this.itemPrice).toFixed(2),\n  //                 qty: parseInt(this.itemsQty),\n  //                 description: this.description,\n  //                 catId: this.pickedCategory,\n  //                 locId: parseInt(this.locationId),\n  //                 userId: this.userId,\n  //             });\n\n  //             if (result.status == 201) {\n\n  //                 this.errorMessage = '';\n  //                 this.successMessage = 'Added New Item';\n\n  //                 setTimeout(() => {\n  //                     this.$router.push({ name: \"menu\", params: { locationId: this.locationId }});\n  //                 }, 2000);\n\n  //             } else {\n  //                 this.successMessage = '';\n  //                 this.errorMessage = 'Something went wrong, Try Again';\n  //             }\n  //         } \n\n  //         else {\n  //             this.successMessage = '';\n  //             this.errorMessage = 'You must fill in all required fields';\n  //         }\n\n  //     },\n  // },\n};","map":{"version":3,"names":["Navbar","mapActions","mapState","mapMutations","axios","name","data","locationId","$route","params","userId","userName","locName","locAddress","itemName","mounted","user","localStorage","getItem","JSON","parse","id","getLocationInfo","redirectTo","val","components","methods","result","get","locDetails","status","length","address"],"sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/menu/AddNewItem.vue"],"sourcesContent":["<template>\n\n    <div class=\"container\">\n\n        <Navbar />\n\n        <router-link :to=\"{ name: 'Menu', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-secondary float-end\">Back To Menu</button>\n        </router-link>\n\n        <div class=\"clearfix\"></div>\n\n        <div class=\"text-center\">\n            <h1>{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div>\n\n        <hr />\n\n        <form @click.prevent>\n\n            <h1 class=\"text-center mb-3\">Add New Item</h1>\n\n            <!-- Item Name -->\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <!-- :class=\"{ 'form-group--error': v$.itemName.$error }\" -->\n                    <div class=\"form-floating mb-3\">\n                        <input type=\"text\" class=\"form-control\" id=\"floatingItemName\" placeholder=\"Enter Item Name\" v-model.trim=\"itemName\">\n                        <label for=\"floatingItemName\">Enter Item Name</label>\n                        <!-- <span class=\"error-feedback\" v-if=\"v$.itemName.$error\">{{ v$.itemName.$errors[0].$message}}</span> -->\n                    </div>\n                </div>\n            </div>\n\n            <!-- It -->\n\n        </form>\n\n        <!-- \n            \n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemPrice.$error }\">\n                        <input type=\"number\" class=\"form-control w300\" id=\"floatingItemPrice\"\n                            placeholder=\"Enter Item Price\" v-model.trim=\"itemPrice\">\n                        <label for=\"floatingItemPrice\">Enter Item Price</label>\n                        <span class=\"error-feedback\" v-if=\"v$.itemPrice.$error\">{{\n            v$.itemPrice.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.description.$error }\">\n                        <textarea class=\"form-control w300 h150\" placeholder=\"Enter Item Description\"\n                            id=\"floatingItemDesc\" v-model.trim=\"description\"></textarea>\n                        <label for=\"floatingItemDesc\">Enter Item Description</label>\n                        <span class=\"error-feedback\" v-if=\"v$.description.$error\">{{\n            v$.description.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating\" :class=\"{ 'form-group--error': v$.pickedCategory.$error }\">\n                        <select class=\"form-select w300\" id=\"floatingSelectCat\" v-model.trim=\"pickedCategory\">\n                            listOfCategories From mapstate\n                            <option v-for=\"(cat, i) in listOfCategories\" :key=\"i\" :value=\"cat.id\">{{ cat.name }}\n                            </option>\n                        </select>\n                        <label for=\"floatingSelectCat\">Select Category Name</label>\n                        <span class=\"error-feedback\" v-if=\"v$.pickedCategory.$error\">{{\n            v$.pickedCategory.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length>0\">\n                    {{ successMessage }}\n                </div>\n                <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length>0\">\n                    {{ errorMessage }}\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center mb-3\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <button type=\"button\" @click=\"addNewItem()\" class=\"btn btn-secondary w300\">Add Now</button>\n                </div>\n            </div>\n        </form> -->\n\n    </div>\n\n</template>\n\n<script>\n\nimport Navbar from '@/components/header/Navbar.vue';\n\n// For redirect to links\nimport { mapActions, mapState, mapMutations } from \"vuex\";\n\n// To Use HTTP Request\nimport axios from \"axios\";\n\n// // For validate data\n// import useValidate from \"@vuelidate/core\";\n// import { required, minLength, maxLength, between } from \"@vuelidate/validators\";\n\nexport default {\n\n    name: 'AddNewItem',\n\n    data() {\n        return {\n            locationId: this.$route.params.locationId,\n            userId: \"\",\n            userName: '',\n            locName: \"\",\n            locAddress: \"\",\n            itemName: \"\",\n        }\n    },\n\n    mounted() {\n        let user = localStorage.getItem(\"user_info\");\n        if (user) {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            this.getLocationInfo(this.userId, this.locationId);\n        } else {\n            // Redirect to Sign Up page\n            this.redirectTo({ val: 'signup' });\n        }\n    },\n\n    components: {\n        Navbar,\n    },\n\n    methods: {\n        ...mapActions(['redirectTo']),\n        async getLocationInfo(userId, locationId) {\n            let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locationId}`);\n            let locDetails = [];\n            if (result.status == 200) {\n                locDetails = result.data;\n                if (locDetails.length > 0) {\n                    this.locName = locDetails[0].name;\n                    this.locAddress = locDetails[0].address;\n                }\n            }\n        },\n    },\n\n    // data() {\n    //     return {\n    //         v$: useValidate(),\n    //         \n    //         itemPrice: \"\",\n    //         itemsQty: 1,\n    //         description: \"\",\n    //         pickedCategory: \"\",\n    //         successMessage: \"\",\n    //         errorMessage: \"\",\n    //     }\n    // },\n\n    // validations() {\n    //     return {\n    //         itemName: { required, minLength: minLength(6) },\n    //         itemPrice: { required, between: between(0,1000000) },\n    //         itemsQty: { required, between: between(1,100000) },\n    //         description: { required, minLength: minLength(6), maxLength: maxLength(120) },\n    //         pickedCategory: { required },\n    //     }\n    // },\n\n    // computed: {\n    //     ...mapState([\n    //         \"isUserLoggedIn\",\n    //         \"LoggedInUserId\",\n    //         \"numOfCategories\",\n    //         \"listOfCategories\"\n    //     ]),\n    // },\n\n    // async mounted() {\n    //         this.isLoggedInUser();\n    //         this.displayAllCategories({\n    //             userIdIs: this.userId,\n    //             locationIdIs: this.locationId\n    //         });\n    //         this.canUserAccessThisLocation({\n    //             userIdIs: this.userId,\n    //             locationIdIs: this.locationId,\n    //             redirectToPage: \"home\",\n    //         });\n    // },\n\n    // methods: {\n    //     ...mapMutations([\n    //         \"isLoggedInUser\",\n    //         \"displayAllCategories\",\n    //         \"canUserAccessThisLocation\"\n    //     ]),\n\n    //     async addNewItem() {\n\n    //         // Activate Validation\n    //         this.v$.$validate();\n\n    //         if (!this.v$.$error) {\n\n    //             let result = await axios.post(`http://localhost:3000/items`, {\n    //                 name: this.itemName,\n    //                 // \"17.00\"\n    //                 price: parseFloat(this.itemPrice).toFixed(2),\n    //                 qty: parseInt(this.itemsQty),\n    //                 description: this.description,\n    //                 catId: this.pickedCategory,\n    //                 locId: parseInt(this.locationId),\n    //                 userId: this.userId,\n    //             });\n\n    //             if (result.status == 201) {\n\n    //                 this.errorMessage = '';\n    //                 this.successMessage = 'Added New Item';\n\n    //                 setTimeout(() => {\n    //                     this.$router.push({ name: \"menu\", params: { locationId: this.locationId }});\n    //                 }, 2000);\n\n    //             } else {\n    //                 this.successMessage = '';\n    //                 this.errorMessage = 'Something went wrong, Try Again';\n    //             }\n    //         } \n\n    //         else {\n    //             this.successMessage = '';\n    //             this.errorMessage = 'You must fill in all required fields';\n    //         }\n\n    //     },\n    // },\n\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n// .h150{\n//     min-height: 150px;\n// }\n// .error-feedback, .form-group--error {\n//     color: red;\n//     font-size: 0.85em;\n// }\n// .form-group--error input, .form-group--error textarea, .form-group--error select{\n//     border-color: red;\n// }</style>"],"mappings":"AAoGA,OAAOA,MAAK,MAAO,gCAAgC;;AAEnD;AACA,SAASC,UAAU,EAAEC,QAAQ,EAAEC,YAAW,QAAS,MAAM;;AAEzD;AACA,OAAOC,KAAI,MAAO,OAAO;;AAEzB;AACA;AACA;;AAEA,eAAe;EAEXC,IAAI,EAAE,YAAY;EAElBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,UAAU;MACzCG,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,EAAE;MACXC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE;IACd;EACJ,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACN,IAAIC,IAAG,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC5C,IAAIF,IAAI,EAAE;MACN,IAAI,CAACN,MAAK,GAAIS,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAACK,EAAE;MACjC,IAAI,CAACV,QAAO,GAAIQ,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAACX,IAAI;MACrC,IAAI,CAACiB,eAAe,CAAC,IAAI,CAACZ,MAAM,EAAE,IAAI,CAACH,UAAU,CAAC;IACtD,OAAO;MACH;MACA,IAAI,CAACgB,UAAU,CAAC;QAAEC,GAAG,EAAE;MAAS,CAAC,CAAC;IACtC;EACJ,CAAC;EAEDC,UAAU,EAAE;IACRzB;EACJ,CAAC;EAED0B,OAAO,EAAE;IACL,GAAGzB,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC;IAC7B,MAAMqB,eAAeA,CAACZ,MAAM,EAAEH,UAAU,EAAE;MACtC,IAAIoB,MAAK,GAAI,MAAMvB,KAAK,CAACwB,GAAG,CAAE,0CAAyClB,MAAO,OAAMH,UAAW,EAAC,CAAC;MACjG,IAAIsB,UAAS,GAAI,EAAE;MACnB,IAAIF,MAAM,CAACG,MAAK,IAAK,GAAG,EAAE;QACtBD,UAAS,GAAIF,MAAM,CAACrB,IAAI;QACxB,IAAIuB,UAAU,CAACE,MAAK,GAAI,CAAC,EAAE;UACvB,IAAI,CAACnB,OAAM,GAAIiB,UAAU,CAAC,CAAC,CAAC,CAACxB,IAAI;UACjC,IAAI,CAACQ,UAAS,GAAIgB,UAAU,CAAC,CAAC,CAAC,CAACG,OAAO;QAC3C;MACJ;IACJ;EACJ;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}