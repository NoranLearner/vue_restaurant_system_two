{"ast":null,"code":"import Navbar from '@/components/header/Navbar.vue';\nimport { mapActions, mapMutations } from \"vuex\";\nimport axios from \"axios\";\nexport default {\n  name: 'DeleteAllItems',\n  data() {\n    return {\n      locationId: this.$route.params.locationId,\n      userId: '',\n      locationData: [],\n      locName: \"\",\n      locAddress: \"\"\n    };\n  },\n  async mounted() {\n    let user = localStorage.getItem(\"user_info\");\n    if (user) {\n      this.userId = JSON.parse(user).id;\n      this.canCurrentUserAccessThisLocation();\n    } else {\n      // Redirect to Sign Up page\n      this.redirectTo({\n        val: 'signup'\n      });\n    }\n  },\n  components: {\n    Navbar\n  },\n  methods: {\n    ...mapActions(['redirectTo']),\n    async canCurrentUserAccessThisLocation() {\n      let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n      if (result.status == 200 && result.data.length > 0) {\n        this.locationData = result.data;\n        this.locName = this.locationData[0].name;\n        this.locAddress = this.locationData[0].address;\n      } else {\n        this.redirectTo({\n          val: 'home'\n        });\n      }\n    }\n  }\n\n  /* data() {\n      return {\n          itemId: this.$route.params.itemId,\n          \n          allItemsIdIs: [],\n          myResult: '',\n          successMessage: '',\n          errorMessage: '',\n      }\n  }, */\n\n  /* async mounted() {\n           // http://localhost:3000/items?userId=2&locId=3\n          let result = await axios.get(`http://localhost:3000/items?userId=${this.userId}&locId=${this.locId}`);\n          this.allResults = result.data;\n          let resultLength = this.allResults.length;\n          for (var i = 0; i < resultLength; i++) {\n              this.allItemsIdIs.push(result.data[i].id);\n          }\n          // console.table(this.allItemsIdIs);\n      }\n  }, */\n\n  /* methods: {\n       async deleteAllItems() {\n           let allResults = [];\n           for (var i = 0; i < this.allItemsIdIs.length; i++) {\n              let result = await axios.delete(`http://localhost:3000/items/${this.allItemsIdIs[i]}`);\n              if (result.status == 200) {\n                  allResults.push(true);\n              } else {\n                  allResults.push(false);\n              }\n          }\n           if (!allResults.includes(false)) {\n              this.successMessage = 'All Items are deleted Successfully';\n              this.errorMessage = '';\n              setTimeout(() => {\n                  this.$router.push({ name: \"menu\", params: { locationId: this.locId } });\n              }, 2000);\n          } else {\n              this.successMessage = '';\n              this.errorMessage = 'Something went wrong, Try again';\n          }\n       },\n   }, */\n};","map":{"version":3,"names":["Navbar","mapActions","mapMutations","axios","name","data","locationId","$route","params","userId","locationData","locName","locAddress","mounted","user","localStorage","getItem","JSON","parse","id","canCurrentUserAccessThisLocation","redirectTo","val","components","methods","result","get","status","length","address"],"sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/menu/DeleteAllItems.vue"],"sourcesContent":["<template>\n\n    <div class=\"container\">\n\n        <Navbar />\n\n        <form @click.prevent>\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto text-center\">\n\n                    <h5 class=\"text-danger\">\n                        Are you sure you want to delete all items for this location ?\n                    </h5>\n\n                    <div class=\"text-center\">\n                        <h1 class=\"mb-0\">{{ locName }}</h1>\n                        <p class=\"text-muted\">{{ locAddress }}</p>\n                    </div>\n\n                    <p class=\"text-danger\">\n                        When deleting this items, You will no longer see them ...\n                    </p>\n\n                </div>\n            </div>\n\n            <hr />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <router-link :to=\"{ name: 'Menu', params: { locationId: locationId } }\">\n                        <button type=\"button\" class=\"btn btn-secondary\">Back To Menu</button>\n                    </router-link>\n                    &nbsp;\n                    <!-- @click=\"deleteAllItems()\" -->\n                    <button class=\"btn btn-danger text-white\">Delete All Now</button>\n                </div>\n            </div>\n\n            <br />\n\n        </form>\n\n        <!-- \n\n            \n\n            \n\n        </form> -->\n\n    </div>\n\n</template>\n\n<script>\n\nimport Navbar from '@/components/header/Navbar.vue';\n\nimport { mapActions, mapMutations } from \"vuex\";\n\nimport axios from \"axios\";\n\n\nexport default {\n\n    name: 'DeleteAllItems',\n\n    data() {\n        return {\n            locationId: this.$route.params.locationId,\n            userId: '',\n            locationData: [],\n            locName: \"\",\n            locAddress: \"\",\n        }\n    },\n\n    async mounted() {\n\n        let user = localStorage.getItem(\"user_info\");\n\n        if (user) {\n\n            this.userId = JSON.parse(user).id;\n\n            this.canCurrentUserAccessThisLocation();\n\n\n        } else {\n\n            // Redirect to Sign Up page\n            this.redirectTo({ val: 'signup' });\n\n        }\n\n    },\n\n    components: {\n        Navbar,\n    },\n\n    methods: {\n\n        ...mapActions(['redirectTo']),\n\n        async canCurrentUserAccessThisLocation() {\n            let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n            if (result.status == 200 && result.data.length > 0) {\n                this.locationData = result.data;\n                this.locName = this.locationData[0].name;\n                this.locAddress = this.locationData[0].address;\n            } else {\n                this.redirectTo({ val: 'home' });\n            }\n        },\n\n    },\n\n    /* data() {\n        return {\n            itemId: this.$route.params.itemId,\n            \n            allItemsIdIs: [],\n            myResult: '',\n            successMessage: '',\n            errorMessage: '',\n        }\n    }, */\n\n    /* async mounted() {\n\n            // http://localhost:3000/items?userId=2&locId=3\n            let result = await axios.get(`http://localhost:3000/items?userId=${this.userId}&locId=${this.locId}`);\n            this.allResults = result.data;\n            let resultLength = this.allResults.length;\n            for (var i = 0; i < resultLength; i++) {\n                this.allItemsIdIs.push(result.data[i].id);\n            }\n            // console.table(this.allItemsIdIs);\n        }\n    }, */\n\n    /* methods: {\n\n        async deleteAllItems() {\n\n            let allResults = [];\n\n            for (var i = 0; i < this.allItemsIdIs.length; i++) {\n                let result = await axios.delete(`http://localhost:3000/items/${this.allItemsIdIs[i]}`);\n                if (result.status == 200) {\n                    allResults.push(true);\n                } else {\n                    allResults.push(false);\n                }\n            }\n\n            if (!allResults.includes(false)) {\n                this.successMessage = 'All Items are deleted Successfully';\n                this.errorMessage = '';\n                setTimeout(() => {\n                    this.$router.push({ name: \"menu\", params: { locationId: this.locId } });\n                }, 2000);\n            } else {\n                this.successMessage = '';\n                this.errorMessage = 'Something went wrong, Try again';\n            }\n\n        },\n\n    }, */\n\n}\n\n</script>\n\n<style lang=\"scss\" scoped></style>"],"mappings":"AA0DA,OAAOA,MAAK,MAAO,gCAAgC;AAEnD,SAASC,UAAU,EAAEC,YAAW,QAAS,MAAM;AAE/C,OAAOC,KAAI,MAAO,OAAO;AAGzB,eAAe;EAEXC,IAAI,EAAE,gBAAgB;EAEtBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,UAAU;MACzCG,MAAM,EAAE,EAAE;MACVC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,EAAE;MACXC,UAAU,EAAE;IAChB;EACJ,CAAC;EAED,MAAMC,OAAOA,CAAA,EAAG;IAEZ,IAAIC,IAAG,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAE5C,IAAIF,IAAI,EAAE;MAEN,IAAI,CAACL,MAAK,GAAIQ,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAACK,EAAE;MAEjC,IAAI,CAACC,gCAAgC,CAAC,CAAC;IAG3C,OAAO;MAEH;MACA,IAAI,CAACC,UAAU,CAAC;QAAEC,GAAG,EAAE;MAAS,CAAC,CAAC;IAEtC;EAEJ,CAAC;EAEDC,UAAU,EAAE;IACRvB;EACJ,CAAC;EAEDwB,OAAO,EAAE;IAEL,GAAGvB,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC;IAE7B,MAAMmB,gCAAgCA,CAAA,EAAG;MACrC,IAAIK,MAAK,GAAI,MAAMtB,KAAK,CAACuB,GAAG,CAAE,sCAAqC,IAAI,CAACpB,UAAW,WAAU,IAAI,CAACG,MAAO,EAAC,CAAC;MAC3G,IAAIgB,MAAM,CAACE,MAAK,IAAK,GAAE,IAAKF,MAAM,CAACpB,IAAI,CAACuB,MAAK,GAAI,CAAC,EAAE;QAChD,IAAI,CAAClB,YAAW,GAAIe,MAAM,CAACpB,IAAI;QAC/B,IAAI,CAACM,OAAM,GAAI,IAAI,CAACD,YAAY,CAAC,CAAC,CAAC,CAACN,IAAI;QACxC,IAAI,CAACQ,UAAS,GAAI,IAAI,CAACF,YAAY,CAAC,CAAC,CAAC,CAACmB,OAAO;MAClD,OAAO;QACH,IAAI,CAACR,UAAU,CAAC;UAAEC,GAAG,EAAE;QAAO,CAAC,CAAC;MACpC;IACJ;EAEJ;;EAEA;;;;;;;;;;;EAWA;;;;;;;;;;;;EAaA;;;;;;;;;;;;;;;;;;;;;;;AA8BJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}