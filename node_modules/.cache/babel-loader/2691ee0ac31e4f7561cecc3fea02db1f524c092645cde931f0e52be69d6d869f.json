{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Navbar from '@/components/header/Navbar.vue';\nimport { mapActions, mapMutations } from 'vuex';\nimport axios from 'axios';\n\n// For validate data\n\nimport useValidate from \"@vuelidate/core\";\nimport { required, minLength, maxLength } from \"@vuelidate/validators\";\nexport default {\n  name: 'AddNewCategory',\n  data() {\n    return {\n      userId: '',\n      userName: '',\n      locationId: this.$route.params.locationId,\n      locName: '',\n      locAddress: '',\n      name: \"\",\n      successMessage: \"\",\n      errorMessage: \"\",\n      v$: useValidate(),\n      listOfUserCategories: []\n    };\n  },\n  mounted() {\n    let user = localStorage.getItem(\"user_info\");\n    if (user) {\n      this.userId = JSON.parse(user).id;\n      this.userName = JSON.parse(user).name;\n      this.CanUserAccessThisLocation({\n        userIdIs: this.userId,\n        locationIdIs: this.locationId,\n        redirectToPage: \"home\"\n      });\n      this.getLocationInfo(this.userId, this.locationId);\n      this.listOfUserCategories(this.userId, this.locationId);\n    } else {\n      // Redirect to Sign Up page\n      this.redirectTo({\n        val: 'signup'\n      });\n    }\n  },\n  validations() {\n    return {\n      name: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(15)\n      }\n    };\n  },\n  components: {\n    Navbar\n  },\n  methods: {\n    ...mapActions(['redirectTo']),\n    ...mapMutations(['CanUserAccessThisLocation']),\n    async getLocationInfo(userId, locationId) {\n      let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n      let locDetails = [];\n      if (result.status == 200 && result.data.length > 0) {\n        locDetails = result.data;\n        this.locName = locDetails[0].name;\n        this.locAddress = locDetails[0].address;\n      }\n    },\n    async addCategory() {\n      // Activate Validation\n      this.v$.$validate();\n      if (!this.v$.$error) {\n        let result = await axios.post(`http://localhost:3000/categories`, {\n          name: this.name,\n          userId: this.userId,\n          // locationId: parseInt(this.locationId),\n          locationId: this.locationId\n        });\n        if (result.status == 201) {\n          this.errorMessage = '';\n          this.successMessage = 'Added New Category Successfully';\n          setTimeout(() => {\n            this.$router.push({\n              name: \"ViewCategories\",\n              params: {\n                locationId: this.locationId\n              }\n            });\n          }, 2000);\n        } else {\n          this.successMessage = '';\n          this.errorMessage = 'Something went wrong, Try Again';\n        }\n      } else {\n        this.successMessage = '';\n        this.errorMessage = 'You must fill in category name';\n      }\n    },\n    async listOfUserCategories() {\n      let result = await axios.get(`http://localhost:3000/categories?userId=${this.userId}&`);\n    }\n  }\n};","map":{"version":3,"names":["Navbar","mapActions","mapMutations","axios","useValidate","required","minLength","maxLength","name","data","userId","userName","locationId","$route","params","locName","locAddress","successMessage","errorMessage","v$","listOfUserCategories","mounted","user","localStorage","getItem","JSON","parse","id","CanUserAccessThisLocation","userIdIs","locationIdIs","redirectToPage","getLocationInfo","redirectTo","val","validations","components","methods","result","get","locDetails","status","length","address","addCategory","$validate","$error","post","setTimeout","$router","push"],"sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/menu/AddNewCategory.vue"],"sourcesContent":["<template>\n\n    <div class=\"container\">\n\n        <Navbar />\n\n        <router-link :to=\"{ name: 'ViewCategories', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-secondary float-start\">Back To Category</button>\n        </router-link>\n\n        <router-link :to=\"{ name: 'Menu', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-light float-end\">Back To Menu</button>\n        </router-link>\n\n        <div class=\"clearfix\"></div>\n\n        <div class=\"text-center\">\n            <h1>{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div>\n\n        <!-- Add New Category Form -->\n\n        <form @click.prevent>\n\n            <h1 class=\"text-center\">Add New Category</h1>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Category Name\" v-model.trim=\"name\">\n                    <span class=\"text-danger\" v-if=\"v$.name.$error\">{{ v$.name.$errors[0].$message }}</span>\n                </div>\n            </div>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length > 0\">\n                    {{ successMessage }}\n                </div>\n                <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length > 0\">\n                    {{ errorMessage }}\n                </div>\n            </div>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <button type=\"button\" @click=\"addCategory()\" class=\"btn btn-success\">Add Now</button>\n                </div>\n            </div>\n\n        </form>\n\n        <!-- <form @click.prevent>\n            <h1 class=\"text-center\">Add New Category</h1>\n            <br />\n            \n            <br />\n            \n            <br />\n            \n        </form> -->\n\n    </div>\n\n</template>\n\n<script>\n\nimport Navbar from '@/components/header/Navbar.vue';\n\nimport { mapActions, mapMutations } from 'vuex';\n\nimport axios from 'axios';\n\n// For validate data\n\nimport useValidate from \"@vuelidate/core\";\n\nimport { required, minLength, maxLength } from \"@vuelidate/validators\";\n\nexport default {\n\n    name: 'AddNewCategory',\n\n    data() {\n        return {\n            userId: '',\n            userName: '',\n            locationId: this.$route.params.locationId,\n            locName: '',\n            locAddress: '',\n            name: \"\",\n            successMessage: \"\",\n            errorMessage: \"\",\n            v$: useValidate(),\n            listOfUserCategories: [],\n        }\n    },\n\n    mounted() {\n        let user = localStorage.getItem(\"user_info\");\n        if (user) {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            this.CanUserAccessThisLocation({ userIdIs: this.userId, locationIdIs: this.locationId, redirectToPage: \"home\" });\n            this.getLocationInfo(this.userId, this.locationId);\n            this.listOfUserCategories(this.userId, this.locationId);\n        }\n        else {\n            // Redirect to Sign Up page\n            this.redirectTo({ val: 'signup' });\n        }\n    },\n\n    validations() {\n        return {\n            name: { required, minLength: minLength(3), maxLength: maxLength(15) },\n        }\n    },\n\n    components: {\n        Navbar,\n    },\n\n    methods: {\n        ...mapActions(['redirectTo']),\n        ...mapMutations(['CanUserAccessThisLocation']),\n        async getLocationInfo(userId, locationId) {\n            let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n            let locDetails = [];\n            if (result.status == 200 && result.data.length > 0) {\n                locDetails = result.data;\n                this.locName = locDetails[0].name;\n                this.locAddress = locDetails[0].address;\n            }\n        },\n        async addCategory() {\n            // Activate Validation\n            this.v$.$validate();\n            if (!this.v$.$error) {\n                let result = await axios.post(`http://localhost:3000/categories`, {\n                    name: this.name,\n                    userId: this.userId,\n                    // locationId: parseInt(this.locationId),\n                    locationId: this.locationId,\n                });\n                if (result.status == 201) {\n                    this.errorMessage = '';\n                    this.successMessage = 'Added New Category Successfully';\n                    setTimeout(() => {\n                        this.$router.push({ name: \"ViewCategories\", params: { locationId: this.locationId } });\n                    }, 2000);\n                } else {\n                    this.successMessage = '';\n                    this.errorMessage = 'Something went wrong, Try Again';\n                }\n            } else {\n                this.successMessage = '';\n                this.errorMessage = 'You must fill in category name';\n            }\n        },\n        async listOfUserCategories(){\n            let result = await axios.get(`http://localhost:3000/categories?userId=${this.userId}&`);\n        }\n    },\n\n}\n\n</script>\n\n<style lang=\"scss\" scoped></style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}