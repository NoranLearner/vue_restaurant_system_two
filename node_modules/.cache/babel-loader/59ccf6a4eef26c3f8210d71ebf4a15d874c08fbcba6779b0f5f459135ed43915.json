{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, withCtx as _withCtx, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-f5126e3c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"button\",\n  class: \"btn btn-secondary float-end\"\n}, \"Back To Menu\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"clearfix\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"text-center\"\n};\nconst _hoisted_5 = {\n  class: \"text-muted\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"text-center mb-3\"\n}, \"Add New Item\", -1 /* HOISTED */));\nconst _hoisted_8 = {\n  class: \"row g-3 align-items-center\"\n};\nconst _hoisted_9 = {\n  class: \"col-auto d-block mx-auto\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"floatingItemName\"\n}, \"Enter Item Name\", -1 /* HOISTED */));\nconst _hoisted_11 = {\n  key: 0,\n  class: \"error-feedback\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Navbar = _resolveComponent(\"Navbar\");\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_Navbar), _createVNode(_component_router_link, {\n    to: {\n      name: 'Menu',\n      params: {\n        locationId: $data.locationId\n      }\n    }\n  }, {\n    default: _withCtx(() => [_hoisted_2]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"to\"]), _hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h1\", null, _toDisplayString($data.locName), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_5, _toDisplayString($data.locAddress), 1 /* TEXT */)]), _hoisted_6, _createElementVNode(\"form\", {\n    onClick: _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"prevent\"]))\n  }, [_hoisted_7, _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"form-floating mb-3\", {\n      'form-group--error': _ctx.v$.itemName.$error\n    }])\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control w300\",\n    id: \"floatingItemName\",\n    placeholder: \"Enter Item Name\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.itemName = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.itemName, void 0, {\n    trim: true\n  }]]), _hoisted_10, _ctx.v$.itemName.$error ? (_openBlock(), _createElementBlock(\"span\", _hoisted_11, _toDisplayString(_ctx.v$.itemName.$errors[0].$message), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */)])])]), _createCommentVNode(\" \\n            \\n            <div class=\\\"row g-3 align-items-center\\\">\\n                <div class=\\\"col-auto d-block mx-auto\\\">\\n                    <div class=\\\"form-floating mb-3\\\" :class=\\\"{ 'form-group--error': v$.itemPrice.$error }\\\">\\n                        <input type=\\\"number\\\" class=\\\"form-control w300\\\" id=\\\"floatingItemPrice\\\"\\n                            placeholder=\\\"Enter Item Price\\\" v-model.trim=\\\"itemPrice\\\">\\n                        <label for=\\\"floatingItemPrice\\\">Enter Item Price</label>\\n                        <span class=\\\"error-feedback\\\" v-if=\\\"v$.itemPrice.$error\\\">{{\\n            v$.itemPrice.$errors[0].$message }}</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row g-3 align-items-center\\\">\\n                <div class=\\\"col-auto d-block mx-auto\\\">\\n                    <div class=\\\"form-floating mb-3\\\" :class=\\\"{ 'form-group--error': v$.itemsQty.$error }\\\">\\n                        <input type=\\\"number\\\" class=\\\"form-control w300\\\" id=\\\"floatingItemQty\\\"\\n                            placeholder=\\\"Enter Item Quantities\\\" v-model.trim=\\\"itemsQty\\\">\\n                        <label for=\\\"floatingItemQty\\\">Enter Item Quantities</label>\\n                        <span class=\\\"error-feedback\\\" v-if=\\\"v$.itemsQty.$error\\\">{{\\n            v$.itemsQty.$errors[0].$message }}</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row g-3 align-items-center\\\">\\n                <div class=\\\"col-auto d-block mx-auto\\\">\\n                    <div class=\\\"form-floating mb-3\\\" :class=\\\"{ 'form-group--error': v$.description.$error }\\\">\\n                        <textarea class=\\\"form-control w300 h150\\\" placeholder=\\\"Enter Item Description\\\"\\n                            id=\\\"floatingItemDesc\\\" v-model.trim=\\\"description\\\"></textarea>\\n                        <label for=\\\"floatingItemDesc\\\">Enter Item Description</label>\\n                        <span class=\\\"error-feedback\\\" v-if=\\\"v$.description.$error\\\">{{\\n            v$.description.$errors[0].$message }}</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"row g-3 align-items-center\\\">\\n                <div class=\\\"col-auto d-block mx-auto\\\">\\n                    <div class=\\\"form-floating\\\" :class=\\\"{ 'form-group--error': v$.pickedCategory.$error }\\\">\\n                        <select class=\\\"form-select w300\\\" id=\\\"floatingSelectCat\\\" v-model.trim=\\\"pickedCategory\\\">\\n                            listOfCategories From mapstate\\n                            <option v-for=\\\"(cat, i) in listOfCategories\\\" :key=\\\"i\\\" :value=\\\"cat.id\\\">{{ cat.name }}\\n                            </option>\\n                        </select>\\n                        <label for=\\\"floatingSelectCat\\\">Select Category Name</label>\\n                        <span class=\\\"error-feedback\\\" v-if=\\\"v$.pickedCategory.$error\\\">{{\\n            v$.pickedCategory.$errors[0].$message }}</span>\\n                    </div>\\n                </div>\\n            </div>\\n            <br />\\n            <div class=\\\"row g-3 align-items-center\\\">\\n                <div class=\\\"col-auto d-block mx-auto alert alert-success\\\" v-if=\\\"successMessage.length>0\\\">\\n                    {{ successMessage }}\\n                </div>\\n                <div class=\\\"col-auto d-block mx-auto alert alert-danger\\\" v-if=\\\"errorMessage.length>0\\\">\\n                    {{ errorMessage }}\\n                </div>\\n            </div>\\n            <br />\\n            <div class=\\\"row g-3 align-items-center mb-3\\\">\\n                <div class=\\\"col-auto d-block mx-auto\\\">\\n                    <button type=\\\"button\\\" @click=\\\"addNewItem()\\\" class=\\\"btn btn-secondary w300\\\">Add Now</button>\\n                </div>\\n            </div>\\n        </form> \")]);\n}","map":{"version":3,"names":["class","_createElementVNode","type","for","key","_createElementBlock","_hoisted_1","_createVNode","_component_Navbar","_component_router_link","to","name","params","locationId","$data","default","_withCtx","_hoisted_2","_","_hoisted_3","_hoisted_4","_toDisplayString","locName","_hoisted_5","locAddress","_hoisted_6","onClick","_cache","_withModifiers","_hoisted_7","_hoisted_8","_hoisted_9","_normalizeClass","_ctx","v$","itemName","$error","id","placeholder","$event","trim","_hoisted_10","_hoisted_11","$errors","$message","_createCommentVNode"],"sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/menu/AddNewItem.vue"],"sourcesContent":["<template>\n\n    <div class=\"container\">\n\n        <Navbar />\n\n        <router-link :to=\"{ name: 'Menu', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-secondary float-end\">Back To Menu</button>\n        </router-link>\n\n        <div class=\"clearfix\"></div>\n\n        <div class=\"text-center\">\n            <h1>{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div>\n\n        <hr />\n\n        <form @click.prevent>\n\n            <h1 class=\"text-center mb-3\">Add New Item</h1>\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemName.$error }\">\n                        <input type=\"text\" class=\"form-control w300\" id=\"floatingItemName\" placeholder=\"Enter Item Name\" v-model.trim=\"itemName\">\n                        <label for=\"floatingItemName\">Enter Item Name</label>\n                        <span class=\"error-feedback\" v-if=\"v$.itemName.$error\">{{ v$.itemName.$errors[0].$message}}</span>\n                    </div>\n                </div>\n            </div>\n\n        </form>\n\n        <!-- \n            \n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemPrice.$error }\">\n                        <input type=\"number\" class=\"form-control w300\" id=\"floatingItemPrice\"\n                            placeholder=\"Enter Item Price\" v-model.trim=\"itemPrice\">\n                        <label for=\"floatingItemPrice\">Enter Item Price</label>\n                        <span class=\"error-feedback\" v-if=\"v$.itemPrice.$error\">{{\n            v$.itemPrice.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemsQty.$error }\">\n                        <input type=\"number\" class=\"form-control w300\" id=\"floatingItemQty\"\n                            placeholder=\"Enter Item Quantities\" v-model.trim=\"itemsQty\">\n                        <label for=\"floatingItemQty\">Enter Item Quantities</label>\n                        <span class=\"error-feedback\" v-if=\"v$.itemsQty.$error\">{{\n            v$.itemsQty.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.description.$error }\">\n                        <textarea class=\"form-control w300 h150\" placeholder=\"Enter Item Description\"\n                            id=\"floatingItemDesc\" v-model.trim=\"description\"></textarea>\n                        <label for=\"floatingItemDesc\">Enter Item Description</label>\n                        <span class=\"error-feedback\" v-if=\"v$.description.$error\">{{\n            v$.description.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating\" :class=\"{ 'form-group--error': v$.pickedCategory.$error }\">\n                        <select class=\"form-select w300\" id=\"floatingSelectCat\" v-model.trim=\"pickedCategory\">\n                            listOfCategories From mapstate\n                            <option v-for=\"(cat, i) in listOfCategories\" :key=\"i\" :value=\"cat.id\">{{ cat.name }}\n                            </option>\n                        </select>\n                        <label for=\"floatingSelectCat\">Select Category Name</label>\n                        <span class=\"error-feedback\" v-if=\"v$.pickedCategory.$error\">{{\n            v$.pickedCategory.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length>0\">\n                    {{ successMessage }}\n                </div>\n                <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length>0\">\n                    {{ errorMessage }}\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center mb-3\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <button type=\"button\" @click=\"addNewItem()\" class=\"btn btn-secondary w300\">Add Now</button>\n                </div>\n            </div>\n        </form> -->\n\n    </div>\n\n</template>\n\n<script>\n\nimport Navbar from '@/components/header/Navbar.vue';\n\n// For redirect to links\nimport { mapActions, mapState, mapMutations } from \"vuex\";\n\n// To Use HTTP Request\nimport axios from \"axios\";\n\n// // For validate data\n// import useValidate from \"@vuelidate/core\";\n// import { required, minLength, maxLength, between } from \"@vuelidate/validators\";\n\nexport default {\n\n    name: 'AddNewItem',\n\n    data() {\n        return {\n            locationId: this.$route.params.locationId,\n            userId: \"\",\n            userName: '',\n            locName: \"\",\n            locAddress: \"\",\n        }\n    },\n\n    mounted() {\n        let user = localStorage.getItem(\"user_info\");\n        if (user) {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            this.getLocationInfo(this.userId, this.locationId);\n        } else {\n            // Redirect to Sign Up page\n            this.redirectTo({ val: 'signup' });\n        }\n    },\n\n    components: {\n        Navbar,\n    },\n\n    methods: {\n        ...mapActions(['redirectTo']),\n        async getLocationInfo(userId, locationId) {\n            let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locationId}`);\n            let locDetails = [];\n            if (result.status == 200) {\n                locDetails = result.data;\n                if (locDetails.length > 0) {\n                    this.locName = locDetails[0].name;\n                    this.locAddress = locDetails[0].address;\n                }\n            }\n        },\n    },\n\n    // data() {\n    //     return {\n    //         v$: useValidate(),\n    //         itemName: \"\",\n    //         itemPrice: \"\",\n    //         itemsQty: 1,\n    //         description: \"\",\n    //         pickedCategory: \"\",\n    //         successMessage: \"\",\n    //         errorMessage: \"\",\n    //     }\n    // },\n\n    // validations() {\n    //     return {\n    //         itemName: { required, minLength: minLength(6) },\n    //         itemPrice: { required, between: between(0,1000000) },\n    //         itemsQty: { required, between: between(1,100000) },\n    //         description: { required, minLength: minLength(6), maxLength: maxLength(120) },\n    //         pickedCategory: { required },\n    //     }\n    // },\n\n    // computed: {\n    //     ...mapState([\n    //         \"isUserLoggedIn\",\n    //         \"LoggedInUserId\",\n    //         \"numOfCategories\",\n    //         \"listOfCategories\"\n    //     ]),\n    // },\n\n    // async mounted() {\n    //         this.isLoggedInUser();\n    //         this.displayAllCategories({\n    //             userIdIs: this.userId,\n    //             locationIdIs: this.locationId\n    //         });\n    //         this.canUserAccessThisLocation({\n    //             userIdIs: this.userId,\n    //             locationIdIs: this.locationId,\n    //             redirectToPage: \"home\",\n    //         });\n    // },\n\n    // methods: {\n    //     ...mapMutations([\n    //         \"isLoggedInUser\",\n    //         \"displayAllCategories\",\n    //         \"canUserAccessThisLocation\"\n    //     ]),\n\n    //     async addNewItem() {\n\n    //         // Activate Validation\n    //         this.v$.$validate();\n\n    //         if (!this.v$.$error) {\n\n    //             let result = await axios.post(`http://localhost:3000/items`, {\n    //                 name: this.itemName,\n    //                 // \"17.00\"\n    //                 price: parseFloat(this.itemPrice).toFixed(2),\n    //                 qty: parseInt(this.itemsQty),\n    //                 description: this.description,\n    //                 catId: this.pickedCategory,\n    //                 locId: parseInt(this.locationId),\n    //                 userId: this.userId,\n    //             });\n\n    //             if (result.status == 201) {\n\n    //                 this.errorMessage = '';\n    //                 this.successMessage = 'Added New Item';\n\n    //                 setTimeout(() => {\n    //                     this.$router.push({ name: \"menu\", params: { locationId: this.locationId }});\n    //                 }, 2000);\n\n    //             } else {\n    //                 this.successMessage = '';\n    //                 this.errorMessage = 'Something went wrong, Try Again';\n    //             }\n    //         } \n\n    //         else {\n    //             this.successMessage = '';\n    //             this.errorMessage = 'You must fill in all required fields';\n    //         }\n\n    //     },\n    // },\n\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n// .w300{\n//     min-width: 300px;\n// }\n// .h150{\n//     min-height: 150px;\n// }\n// .error-feedback, .form-group--error {\n//     color: red;\n//     font-size: 0.85em;\n// }\n// .form-group--error input, .form-group--error textarea, .form-group--error select{\n//     border-color: red;\n// }</style>"],"mappings":";;;EAESA,KAAK,EAAC;AAAW;gEAKdC,mBAAA,CAA+E;EAAvEC,IAAI,EAAC,QAAQ;EAACF,KAAK,EAAC;GAA8B,cAAY;gEAG1EC,mBAAA,CAA4B;EAAvBD,KAAK,EAAC;AAAU;;EAEhBA,KAAK,EAAC;AAAa;;EAEjBA,KAAK,EAAC;AAAY;gEAGzBC,mBAAA,CAAM;gEAIFA,mBAAA,CAA8C;EAA1CD,KAAK,EAAC;AAAkB,GAAC,cAAY;;EAEpCA,KAAK,EAAC;AAA4B;;EAC9BA,KAAK,EAAC;AAA0B;iEAG7BC,mBAAA,CAAqD;EAA9CE,GAAG,EAAC;AAAkB,GAAC,iBAAe;;EA3BrEC,GAAA;EA4B8BJ,KAAK,EAAC;;;;;uBA1BhCK,mBAAA,CAmGM,OAnGNC,UAmGM,GAjGFC,YAAA,CAAUC,iBAAA,GAEVD,YAAA,CAEcE,sBAAA;IAFAC,EAAE;MAAAC,IAAA;MAAAC,MAAA;QAAAC,UAAA,EAAwCC,KAAA,CAAAD;MAAU;IAAA;;IAN1EE,OAAA,EAAAC,QAAA,CAOY,MAA+E,CAA/EC,UAA+E,C;IAP3FC,CAAA;6BAUQC,UAA4B,EAE5BlB,mBAAA,CAGM,OAHNmB,UAGM,GAFFnB,mBAAA,CAAsB,YAAAoB,gBAAA,CAAfP,KAAA,CAAAQ,OAAO,kBACdrB,mBAAA,CAA0C,KAA1CsB,UAA0C,EAAAF,gBAAA,CAAjBP,KAAA,CAAAU,UAAU,iB,GAGvCC,UAAM,EAENxB,mBAAA,CAcO;IAdAyB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAnBpBC,cAAA,CAmBc,QAAc;MAEhBC,UAA8C,EAE9C5B,mBAAA,CAQM,OARN6B,UAQM,GAPF7B,mBAAA,CAMM,OANN8B,UAMM,GALF9B,mBAAA,CAIM;IAJDD,KAAK,EAzB9BgC,eAAA,EAyB+B,oBAAoB;MAAA,qBAAgCC,IAAA,CAAAC,EAAE,CAACC,QAAQ,CAACC;IAAM;sBAC7EnC,mBAAA,CAAyH;IAAlHC,IAAI,EAAC,MAAM;IAACF,KAAK,EAAC,mBAAmB;IAACqC,EAAE,EAAC,kBAAkB;IAACC,WAAW,EAAC,iBAAiB;IA1BxH,uBAAAX,MAAA,QAAAA,MAAA,MAAAY,MAAA,IA0BuIN,IAAA,CAAAE,QAAQ,GAAAI,MAAA;iDAARN,IAAA,CAAAE,QAAQ,E;IA1B/IK,IAAA,EA0ByH;EAAuB,E,IACxHC,WAAqD,EAClBR,IAAA,CAAAC,EAAE,CAACC,QAAQ,CAACC,MAAM,I,cAArD/B,mBAAA,CAAkG,QAAlGqC,WAAkG,EAAArB,gBAAA,CAAxCY,IAAA,CAAAC,EAAE,CAACC,QAAQ,CAACQ,OAAO,IAAIC,QAAQ,oBA5BjHC,mBAAA,e,wBAmCQA,mBAAA,0xHAgEW,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}