{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Navbar from '@/components/header/Navbar.vue';\n\n// import { mapActions, mapMutations } from 'vuex';\n\n// import axios from 'axios';\n\n// // For validate data\n\n// import useValidate from \"@vuelidate/core\";\n\n// import { required, minLength, maxLength } from \"@vuelidate/validators\";\n\nexport default {\n  name: 'UpdateCategory',\n  /* data() {\n      return {\n          userId: '',\n          userName: '',\n          locationId: this.$route.params.locationId,\n          locName: '',\n          locAddress: '',\n          name: \"\",\n          successMessage: \"\",\n          errorMessage: \"\",\n          v$: useValidate(),\n          listOfUserCategories: [],\n      }\n  }, */\n\n  /* mounted() {\n      let user = localStorage.getItem(\"user_info\");\n      if (user) {\n          this.userId = JSON.parse(user).id;\n          this.userName = JSON.parse(user).name;\n          this.CanUserAccessThisLocation({ userIdIs: this.userId, locationIdIs: this.locationId, redirectToPage: \"home\" });\n          this.getLocationInfo(this.userId, this.locationId);\n          this.displayUserCategories(this.userId, this.locationId);\n      }\n      else {\n          // Redirect to Sign Up page\n          this.redirectTo({ val: 'signup' });\n      }\n  }, */\n\n  /* validations() {\n      return {\n          name: { required, minLength: minLength(3), maxLength: maxLength(15) },\n      }\n  }, */\n\n  components: {\n    Navbar\n  },\n  methods: {\n    ...mapActions(['redirectTo']),\n    ...mapMutations(['CanUserAccessThisLocation']),\n    async getLocationInfo(userId, locationId) {\n      let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n      let locDetails = [];\n      if (result.status == 200 && result.data.length > 0) {\n        locDetails = result.data;\n        this.locName = locDetails[0].name;\n        this.locAddress = locDetails[0].address;\n      }\n    },\n    async addCategory() {\n      // Activate Validation\n      this.v$.$validate();\n      // For Not Duplicate Category\n      let filterCategoryName = this.listOfUserCategories.filter(v => v.name.toLocaleLowerCase() == this.name.toLocaleLowerCase());\n      if (!this.v$.$error) {\n        if (filterCategoryName.length > 0) {\n          this.errorMessage = 'Category Name already exists, Try Another Name';\n          this.successMessage = '';\n        } else {\n          let result = await axios.post(`http://localhost:3000/categories`, {\n            name: this.name,\n            userId: this.userId,\n            // locationId: parseInt(this.locationId),\n            locationId: this.locationId\n          });\n          if (result.status == 201) {\n            this.errorMessage = '';\n            this.successMessage = 'Added New Category Successfully';\n            setTimeout(() => {\n              this.$router.push({\n                name: \"ViewCategories\",\n                params: {\n                  locationId: this.locationId\n                }\n              });\n            }, 2000);\n          } else {\n            this.successMessage = '';\n            this.errorMessage = 'Something went wrong, Try Again';\n          }\n        }\n      } else {\n        this.successMessage = '';\n        this.errorMessage = 'You must fill in category name';\n      }\n    },\n    async displayUserCategories(userId, locationId) {\n      let result = await axios.get(`http://localhost:3000/categories?userId=${this.userId}&locationId=${this.locationId}`);\n      // let categoryDetails = [];\n      if (result.status == 200) {\n        // categoryDetails = result.data;\n        // console.log(categoryDetails);\n        this.listOfUserCategories = result.data;\n        console.log(this.listOfUserCategories);\n      }\n    }\n  }\n};","map":{"version":3,"names":["Navbar","name","components","methods","mapActions","mapMutations","getLocationInfo","userId","locationId","result","axios","get","locDetails","status","data","length","locName","locAddress","address","addCategory","v$","$validate","filterCategoryName","listOfUserCategories","filter","v","toLocaleLowerCase","$error","errorMessage","successMessage","post","setTimeout","$router","push","params","displayUserCategories","console","log"],"sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/menu/UpdateCategory.vue"],"sourcesContent":["<template>\n\n    <div class=\"container\">\n\n        <Navbar />\n\n        <!-- <router-link :to=\"{ name: 'ViewCategories', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-secondary float-start\">Back To Category</button>\n        </router-link> -->\n\n        <!-- <router-link :to=\"{ name: 'Menu', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-light float-end\">Back To Menu</button>\n        </router-link> -->\n\n        <!-- <div class=\"clearfix\"></div> -->\n\n        <!-- <div class=\"text-center\">\n            <h1>{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div> -->\n\n        <!-- Add New Category Form -->\n\n        <!-- <form @click.prevent>\n\n            <h1 class=\"text-center\">Add New Category</h1>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Category Name\" v-model.trim=\"name\">\n                    <span class=\"text-danger\" v-if=\"v$.name.$error\">{{ v$.name.$errors[0].$message }}</span>\n                </div>\n            </div>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length > 0\">\n                    {{ successMessage }}\n                </div>\n                <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length > 0\">\n                    {{ errorMessage }}\n                </div>\n            </div>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <button type=\"button\" @click=\"addCategory()\" class=\"btn btn-success\">Add Now</button>\n                </div>\n            </div>\n\n        </form> -->\n\n    </div>\n\n</template>\n\n<script>\n\nimport Navbar from '@/components/header/Navbar.vue';\n\n// import { mapActions, mapMutations } from 'vuex';\n\n// import axios from 'axios';\n\n// // For validate data\n\n// import useValidate from \"@vuelidate/core\";\n\n// import { required, minLength, maxLength } from \"@vuelidate/validators\";\n\nexport default {\n\n    name: 'UpdateCategory',\n\n    /* data() {\n        return {\n            userId: '',\n            userName: '',\n            locationId: this.$route.params.locationId,\n            locName: '',\n            locAddress: '',\n            name: \"\",\n            successMessage: \"\",\n            errorMessage: \"\",\n            v$: useValidate(),\n            listOfUserCategories: [],\n        }\n    }, */\n\n    /* mounted() {\n        let user = localStorage.getItem(\"user_info\");\n        if (user) {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            this.CanUserAccessThisLocation({ userIdIs: this.userId, locationIdIs: this.locationId, redirectToPage: \"home\" });\n            this.getLocationInfo(this.userId, this.locationId);\n            this.displayUserCategories(this.userId, this.locationId);\n        }\n        else {\n            // Redirect to Sign Up page\n            this.redirectTo({ val: 'signup' });\n        }\n    }, */\n\n    /* validations() {\n        return {\n            name: { required, minLength: minLength(3), maxLength: maxLength(15) },\n        }\n    }, */\n\n    components: {\n        Navbar,\n    },\n\n    methods: {\n        ...mapActions(['redirectTo']),\n        ...mapMutations(['CanUserAccessThisLocation']),\n        async getLocationInfo(userId, locationId) {\n            let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n            let locDetails = [];\n            if (result.status == 200 && result.data.length > 0) {\n                locDetails = result.data;\n                this.locName = locDetails[0].name;\n                this.locAddress = locDetails[0].address;\n            }\n        },\n        async addCategory() {\n            // Activate Validation\n            this.v$.$validate();\n            // For Not Duplicate Category\n            let filterCategoryName = this.listOfUserCategories.filter((v) => v.name.toLocaleLowerCase() == this.name.toLocaleLowerCase());\n            if (!this.v$.$error) {\n                if (filterCategoryName.length > 0) {\n                    this.errorMessage = 'Category Name already exists, Try Another Name';\n                    this.successMessage = '';\n                } else {\n                    let result = await axios.post(`http://localhost:3000/categories`, {\n                        name: this.name,\n                        userId: this.userId,\n                        // locationId: parseInt(this.locationId),\n                        locationId: this.locationId,\n                    });\n                    if (result.status == 201) {\n                        this.errorMessage = '';\n                        this.successMessage = 'Added New Category Successfully';\n                        setTimeout(() => {\n                            this.$router.push({ name: \"ViewCategories\", params: { locationId: this.locationId } });\n                        }, 2000);\n                    } else {\n                        this.successMessage = '';\n                        this.errorMessage = 'Something went wrong, Try Again';\n                    }\n                }\n            } else {\n                this.successMessage = '';\n                this.errorMessage = 'You must fill in category name';\n            }\n        },\n        async displayUserCategories(userId, locationId) {\n            let result = await axios.get(`http://localhost:3000/categories?userId=${this.userId}&locationId=${this.locationId}`);\n            // let categoryDetails = [];\n            if (result.status == 200) {\n                // categoryDetails = result.data;\n                // console.log(categoryDetails);\n                this.listOfUserCategories = result.data;\n                console.log(this.listOfUserCategories);\n            }\n        }\n    },\n\n}\n\n</script>\n\n<style lang=\"scss\" scoped></style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}