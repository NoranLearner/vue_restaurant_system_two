{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Navbar from '@/components/header/Navbar.vue';\nimport { mapActions, mapMutations } from 'vuex';\nimport axios from 'axios';\n\n// For validate data\n\nimport useValidate from \"@vuelidate/core\";\nimport { required, minLength, maxLength } from \"@vuelidate/validators\";\nexport default {\n  name: 'UpdateCategory',\n  data() {\n    return {\n      userId: '',\n      userName: '',\n      locationId: this.$route.params.locationId,\n      catId: this.$route.params.catId,\n      locName: '',\n      locAddress: '',\n      name: \"\",\n      successMessage: \"\",\n      errorMessage: \"\",\n      v$: useValidate(),\n      listOfUserCategories: [],\n      categoryName: []\n    };\n  },\n  mounted() {\n    let user = localStorage.getItem(\"user_info\");\n    if (user) {\n      this.userId = JSON.parse(user).id;\n      this.userName = JSON.parse(user).name;\n      // this.CanUserAccessThisLocation({ userIdIs: this.userId, locationIdIs: this.locationId, redirectToPage: \"home\" });\n      this.getLocationInfo(this.userId, this.locationId);\n      this.displayUserCategories(this.userId, this.locationId);\n      this.canUserAccessThisCategory({\n        userIdIs: this.userId,\n        locationIdIs: this.locationId,\n        catIdIs: this.catId,\n        redirectToPage: \"home\"\n      });\n      this.getCategoryName(this.userId, this.locationId, this.catId);\n    } else {\n      // Redirect to Sign Up page\n      this.redirectTo({\n        val: 'signup'\n      });\n    }\n  },\n  validations() {\n    return {\n      name: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(15)\n      }\n    };\n  },\n  components: {\n    Navbar\n  },\n  methods: {\n    ...mapActions(['redirectTo']),\n    ...mapMutations(['CanUserAccessThisLocation', \"displayAllCategories\", \"canUserAccessThisCategory\"]),\n    async getLocationInfo(userId, locationId) {\n      let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n      let locDetails = [];\n      if (result.status == 200 && result.data.length > 0) {\n        locDetails = result.data;\n        this.locName = locDetails[0].name;\n        this.locAddress = locDetails[0].address;\n      }\n    },\n    async displayUserCategories(userId, locationId) {\n      let result = await axios.get(`http://localhost:3000/categories?userId=${this.userId}&locationId=${this.locationId}`);\n      // let categoryDetails = [];\n      if (result.status == 200) {\n        // categoryDetails = result.data;\n        // console.log(categoryDetails);\n        this.listOfUserCategories = result.data;\n        console.log(this.listOfUserCategories);\n      }\n    },\n    async getCategoryName(userId, locId, catId) {\n      let result = await axios.get(`\n            http://localhost:3000/categories?userId=${userId}&locationId=${locationId}&id=${catId}\n            `);\n      if (result.status == 200) {\n        this.categoryNames = result.data;\n        if (this.categoryNames.length > 0) {\n          this.name = this.categoryNames[0].name;\n        }\n      }\n    },\n    async updateCategory() {\n      // Activate Validation\n      this.v$.$validate();\n      // For Not Duplicate Category\n      let filterCategoryName = this.listOfUserCategories.filter(v => v.name.toLocaleLowerCase() == this.name.toLocaleLowerCase());\n      if (!this.v$.$error) {\n        if (filterCategoryName.length > 0) {\n          this.errorMessage = 'Category Name already exists, Try Another Name';\n          this.successMessage = '';\n        } else {\n          let result = await axios.put(`http://localhost:3000/categories/${this.catId}`, {\n            name: this.name,\n            userId: this.userId,\n            // locationId: parseInt(this.locationId),\n            locationId: this.locationId\n          });\n          if (result.status == 200) {\n            this.errorMessage = '';\n            this.successMessage = 'Update Category Name Successfully';\n            setTimeout(() => {\n              this.$router.push({\n                name: \"ViewCategories\",\n                params: {\n                  locationId: this.locationId\n                }\n              });\n            }, 2000);\n          } else {\n            this.successMessage = '';\n            this.errorMessage = 'Something went wrong, Try Again';\n          }\n        }\n      } else {\n        this.successMessage = '';\n        this.errorMessage = 'You must fill in category name';\n      }\n    }\n  }\n};","map":{"version":3,"names":["Navbar","mapActions","mapMutations","axios","useValidate","required","minLength","maxLength","name","data","userId","userName","locationId","$route","params","catId","locName","locAddress","successMessage","errorMessage","v$","listOfUserCategories","categoryName","mounted","user","localStorage","getItem","JSON","parse","id","getLocationInfo","displayUserCategories","canUserAccessThisCategory","userIdIs","locationIdIs","catIdIs","redirectToPage","getCategoryName","redirectTo","val","validations","components","methods","result","get","locDetails","status","length","address","console","log","locId","categoryNames","updateCategory","$validate","filterCategoryName","filter","v","toLocaleLowerCase","$error","put","setTimeout","$router","push"],"sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/menu/UpdateCategory.vue"],"sourcesContent":["<template>\n\n    <div class=\"container\">\n\n        <Navbar />\n\n        <router-link :to=\"{ name: 'ViewCategories', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-secondary float-start\">Back To Category</button>\n        </router-link>\n\n        <router-link :to=\"{ name: 'Menu', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-light float-end\">Back To Menu</button>\n        </router-link>\n\n        <div class=\"clearfix\"></div>\n\n        <div class=\"text-center\">\n            <h1>{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div>\n\n        <!-- Update Category Form -->\n\n        <form @click.prevent>\n\n            <h1 class=\"text-center\">Update Category</h1>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Category Name\" v-model.trim=\"name\">\n                    <span class=\"text-danger\" v-if=\"v$.name.$error\">{{ v$.name.$errors[0].$message }}</span>\n                </div>\n            </div>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length > 0\">\n                    {{ successMessage }}\n                </div>\n                <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length > 0\">\n                    {{ errorMessage }}\n                </div>\n            </div>\n\n            <br />\n\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <button type=\"button\" @click=\"updateCategory()\" class=\"btn btn-primary text-white\">Update Now</button>\n                </div>\n            </div>\n\n        </form>\n\n    </div>\n\n</template>\n\n<script>\n\nimport Navbar from '@/components/header/Navbar.vue';\n\nimport { mapActions, mapMutations } from 'vuex';\n\nimport axios from 'axios';\n\n// For validate data\n\nimport useValidate from \"@vuelidate/core\";\n\nimport { required, minLength, maxLength } from \"@vuelidate/validators\";\n\nexport default {\n\n    name: 'UpdateCategory',\n\n    data() {\n        return {\n            userId: '',\n            userName: '',\n            locationId: this.$route.params.locationId,\n            catId: this.$route.params.catId,\n            locName: '',\n            locAddress: '',\n            name: \"\",\n            successMessage: \"\",\n            errorMessage: \"\",\n            v$: useValidate(),\n            listOfUserCategories: [],\n            categoryName:[],\n        }\n    },\n\n    mounted() {\n        let user = localStorage.getItem(\"user_info\");\n        if (user) {\n            this.userId = JSON.parse(user).id;\n            this.userName = JSON.parse(user).name;\n            // this.CanUserAccessThisLocation({ userIdIs: this.userId, locationIdIs: this.locationId, redirectToPage: \"home\" });\n            this.getLocationInfo(this.userId, this.locationId);\n            this.displayUserCategories(this.userId, this.locationId);\n            this.canUserAccessThisCategory({userIdIs: this.userId,locationIdIs: this.locationId,catIdIs: this.catId,redirectToPage: \"home\",});\n            this.getCategoryName(this.userId, this.locationId, this.catId);\n        }\n        else {\n            // Redirect to Sign Up page\n            this.redirectTo({ val: 'signup' });\n        }\n    },\n\n    validations() {\n        return {\n            name: { required, minLength: minLength(3), maxLength: maxLength(15) },\n        }\n    },\n\n    components: {\n        Navbar,\n    },\n\n    methods: {\n        ...mapActions(['redirectTo']),\n        ...mapMutations(['CanUserAccessThisLocation', \"displayAllCategories\",\"canUserAccessThisCategory\",]),\n        async getLocationInfo(userId, locationId) {\n            let result = await axios.get(`http://localhost:3000/locations?id=${this.locationId}&userId=${this.userId}`);\n            let locDetails = [];\n            if (result.status == 200 && result.data.length > 0) {\n                locDetails = result.data;\n                this.locName = locDetails[0].name;\n                this.locAddress = locDetails[0].address;\n            }\n        },\n        async displayUserCategories(userId, locationId) {\n            let result = await axios.get(`http://localhost:3000/categories?userId=${this.userId}&locationId=${this.locationId}`);\n            // let categoryDetails = [];\n            if (result.status == 200) {\n                // categoryDetails = result.data;\n                // console.log(categoryDetails);\n                this.listOfUserCategories = result.data;\n                console.log(this.listOfUserCategories);\n            }\n        },\n        async getCategoryName(userId,locId,catId) {\n            let result = await axios.get(`\n            http://localhost:3000/categories?userId=${userId}&locationId=${locationId}&id=${catId}\n            `);\n            if (result.status == 200) {\n                this.categoryNames = result.data;\n                if (this.categoryNames.length>0) {\n                    this.name = this.categoryNames[0].name;\n                }\n            }\n        },\n        async updateCategory() {\n            // Activate Validation\n            this.v$.$validate();\n            // For Not Duplicate Category\n            let filterCategoryName = this.listOfUserCategories.filter((v) => v.name.toLocaleLowerCase() == this.name.toLocaleLowerCase());\n            if (!this.v$.$error) {\n                if (filterCategoryName.length > 0) {\n                    this.errorMessage = 'Category Name already exists, Try Another Name';\n                    this.successMessage = '';\n                } else {\n                    let result = await axios.put(`http://localhost:3000/categories/${this.catId}`, {\n                        name: this.name,\n                        userId: this.userId,\n                        // locationId: parseInt(this.locationId),\n                        locationId: this.locationId,\n                    });\n                    if (result.status == 200) {\n                        this.errorMessage = '';\n                        this.successMessage = 'Update Category Name Successfully';\n                        setTimeout(() => {\n                            this.$router.push({ name: \"ViewCategories\", params: { locationId: this.locationId } });\n                        }, 2000);\n                    } else {\n                        this.successMessage = '';\n                        this.errorMessage = 'Something went wrong, Try Again';\n                    }\n                }\n            } else {\n                this.successMessage = '';\n                this.errorMessage = 'You must fill in category name';\n            }\n        },\n    },\n\n}\n\n</script>\n\n<style lang=\"scss\" scoped></style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}