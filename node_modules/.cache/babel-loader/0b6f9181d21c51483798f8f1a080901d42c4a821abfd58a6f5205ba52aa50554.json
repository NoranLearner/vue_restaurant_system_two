{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Navbar from '@/components/header/Navbar.vue';\n\n// // To Use HTTP Request\n// import axios from \"axios\";\n// // For redirect to links\n// import { mapActions, mapState, mapMutations } from \"vuex\";\n// // For validate data\n// import useValidate from \"@vuelidate/core\";\n// import { required, minLength, maxLength, between } from \"@vuelidate/validators\";\n\nexport default {\n  name: 'AddNewItem',\n  components: {\n    Navbar\n  },\n  // data() {\n  //     return {\n  //         v$: useValidate(),\n  //         userId: \"\",\n  //         userName: \"\",\n  //         locationId: this.$route.params.locationId,\n  //         locName: \"\",\n  //         locAddress: \"\",\n  //         itemName: \"\",\n  //         itemPrice: \"\",\n  //         itemsQty: 1,\n  //         description: \"\",\n  //         pickedCategory: \"\",\n  //         successMessage: \"\",\n  //         errorMessage: \"\",\n  //     }\n  // },\n\n  // validations() {\n  //     return {\n  //         itemName: { required, minLength: minLength(6) },\n  //         itemPrice: { required, between: between(0,1000000) },\n  //         itemsQty: { required, between: between(1,100000) },\n  //         description: { required, minLength: minLength(6), maxLength: maxLength(120) },\n  //         pickedCategory: { required },\n  //     }\n  // },\n\n  // computed: {\n  //     ...mapState([\n  //         \"isUserLoggedIn\",\n  //         \"LoggedInUserId\",\n  //         \"numOfCategories\",\n  //         \"listOfCategories\"\n  //     ]),\n  // },\n\n  // async mounted() {\n  //     let user = localStorage.getItem('user-info');\n  //     if (!user) {\n  //         // Using name in router file\n  //         this.redirectTo({ val: 'sign-up' });\n  //     } else {\n  //         this.userId = JSON.parse(user).id;\n  //         this.userName = JSON.parse(user).name;\n  //         this.isLoggedInUser();\n  //         this.displayAllCategories({\n  //             userIdIs: this.userId,\n  //             locationIdIs: this.locationId\n  //         });\n  //         this.canUserAccessThisLocation({\n  //             userIdIs: this.userId,\n  //             locationIdIs: this.locationId,\n  //             redirectToPage: \"home\",\n  //         });\n  //         this.getLocationInfo(this.userId, this.locationId);\n  //     }\n  // },\n\n  methods: {\n    ...mapMutations([\"isLoggedInUser\", \"displayAllCategories\", \"canUserAccessThisLocation\"]),\n    ...mapActions(['redirectTo']),\n    async getLocationInfo(userId, locId) {\n      let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locId}`);\n      let locDetails = [];\n      if (result.status == 200) {\n        locDetails = result.data;\n        if (locDetails.length > 0) {\n          this.locName = locDetails[0].name;\n          this.locAddress = locDetails[0].address;\n        }\n      }\n    },\n    async addNewItem() {\n      // Activate Validation\n      this.v$.$validate();\n      if (!this.v$.$error) {\n        let result = await axios.post(`http://localhost:3000/items`, {\n          name: this.itemName,\n          // \"17.00\"\n          price: parseFloat(this.itemPrice).toFixed(2),\n          qty: parseInt(this.itemsQty),\n          description: this.description,\n          catId: this.pickedCategory,\n          locId: parseInt(this.locationId),\n          userId: this.userId\n        });\n        if (result.status == 201) {\n          this.errorMessage = '';\n          this.successMessage = 'Added New Item';\n          setTimeout(() => {\n            this.$router.push({\n              name: \"menu\",\n              params: {\n                locationId: this.locationId\n              }\n            });\n          }, 2000);\n        } else {\n          this.successMessage = '';\n          this.errorMessage = 'Something went wrong, Try Again';\n        }\n      } else {\n        this.successMessage = '';\n        this.errorMessage = 'You must fill in all required fields';\n      }\n    }\n  }\n};","map":{"version":3,"names":["Navbar","name","components","methods","mapMutations","mapActions","getLocationInfo","userId","locId","result","axios","get","locDetails","status","data","length","locName","locAddress","address","addNewItem","v$","$validate","$error","post","itemName","price","parseFloat","itemPrice","toFixed","qty","parseInt","itemsQty","description","catId","pickedCategory","locationId","errorMessage","successMessage","setTimeout","$router","push","params"],"sources":["/opt/lampp/htdocs/rest-sys-2021/src/components/menu/AddNewItem.vue"],"sourcesContent":["<template>\n\n    <div class=\"container\">\n\n        <Navbar />\n\n        <!-- <router-link :to=\"{ name: 'menu', params: { locationId: locationId } }\">\n            <button type=\"button\" class=\"btn btn-secondary float-start\">Back To Menu</button>\n        </router-link> -->\n\n        <!-- <div class=\"clearfix\"></div> -->\n\n        <!-- <div class=\"text-center\">\n            <h1 class=\"mb0\">{{ locName }}</h1>\n            <p class=\"text-muted\">{{ locAddress }}</p>\n        </div> -->\n\n        <!-- <hr /> -->\n\n        <!-- ------------------------------------- -->\n\n        <!-- <form @click.prevent>\n            <h1 class=\"text-center\">Add New Item</h1>\n            <br />\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemName.$error }\">\n                        <input type=\"text\" class=\"form-control w300\" id=\"floatingItemName\" placeholder=\"Enter Item Name\"\n                            v-model.trim=\"itemName\">\n                        <label for=\"floatingItemName\">Enter Item Name</label>\n                        <span class=\"error-feedback\"\n                            v-if=\"v$.itemName.$error\">{{ v$.itemName.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemPrice.$error }\">\n                        <input type=\"number\" class=\"form-control w300\" id=\"floatingItemPrice\"\n                            placeholder=\"Enter Item Price\" v-model.trim=\"itemPrice\">\n                        <label for=\"floatingItemPrice\">Enter Item Price</label>\n                        <span class=\"error-feedback\" v-if=\"v$.itemPrice.$error\">{{\n            v$.itemPrice.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.itemsQty.$error }\">\n                        <input type=\"number\" class=\"form-control w300\" id=\"floatingItemQty\"\n                            placeholder=\"Enter Item Quantities\" v-model.trim=\"itemsQty\">\n                        <label for=\"floatingItemQty\">Enter Item Quantities</label>\n                        <span class=\"error-feedback\" v-if=\"v$.itemsQty.$error\">{{\n            v$.itemsQty.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating mb-3\" :class=\"{ 'form-group--error': v$.description.$error }\">\n                        <textarea class=\"form-control w300 h150\" placeholder=\"Enter Item Description\"\n                            id=\"floatingItemDesc\" v-model.trim=\"description\"></textarea>\n                        <label for=\"floatingItemDesc\">Enter Item Description</label>\n                        <span class=\"error-feedback\" v-if=\"v$.description.$error\">{{\n            v$.description.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <div class=\"form-floating\" :class=\"{ 'form-group--error': v$.pickedCategory.$error }\">\n                        <select class=\"form-select w300\" id=\"floatingSelectCat\" v-model.trim=\"pickedCategory\">\n                            listOfCategories From mapstate\n                            <option v-for=\"(cat, i) in listOfCategories\" :key=\"i\" :value=\"cat.id\">{{ cat.name }}\n                            </option>\n                        </select>\n                        <label for=\"floatingSelectCat\">Select Category Name</label>\n                        <span class=\"error-feedback\" v-if=\"v$.pickedCategory.$error\">{{\n            v$.pickedCategory.$errors[0].$message }}</span>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center\">\n                <div class=\"col-auto d-block mx-auto alert alert-success\" v-if=\"successMessage.length>0\">\n                    {{ successMessage }}\n                </div>\n                <div class=\"col-auto d-block mx-auto alert alert-danger\" v-if=\"errorMessage.length>0\">\n                    {{ errorMessage }}\n                </div>\n            </div>\n            <br />\n            <div class=\"row g-3 align-items-center mb-3\">\n                <div class=\"col-auto d-block mx-auto\">\n                    <button type=\"button\" @click=\"addNewItem()\" class=\"btn btn-secondary w300\">Add Now</button>\n                </div>\n            </div>\n        </form> -->\n\n    </div>\n\n</template>\n\n<script>\n\nimport Navbar from '@/components/header/Navbar.vue';\n\n// // To Use HTTP Request\n// import axios from \"axios\";\n// // For redirect to links\n// import { mapActions, mapState, mapMutations } from \"vuex\";\n// // For validate data\n// import useValidate from \"@vuelidate/core\";\n// import { required, minLength, maxLength, between } from \"@vuelidate/validators\";\n\nexport default {\n\n    name: 'AddNewItem',\n\n    components: {\n        Navbar,\n    },\n\n    // data() {\n    //     return {\n    //         v$: useValidate(),\n    //         userId: \"\",\n    //         userName: \"\",\n    //         locationId: this.$route.params.locationId,\n    //         locName: \"\",\n    //         locAddress: \"\",\n    //         itemName: \"\",\n    //         itemPrice: \"\",\n    //         itemsQty: 1,\n    //         description: \"\",\n    //         pickedCategory: \"\",\n    //         successMessage: \"\",\n    //         errorMessage: \"\",\n    //     }\n    // },\n\n    // validations() {\n    //     return {\n    //         itemName: { required, minLength: minLength(6) },\n    //         itemPrice: { required, between: between(0,1000000) },\n    //         itemsQty: { required, between: between(1,100000) },\n    //         description: { required, minLength: minLength(6), maxLength: maxLength(120) },\n    //         pickedCategory: { required },\n    //     }\n    // },\n\n    // computed: {\n    //     ...mapState([\n    //         \"isUserLoggedIn\",\n    //         \"LoggedInUserId\",\n    //         \"numOfCategories\",\n    //         \"listOfCategories\"\n    //     ]),\n    // },\n\n    // async mounted() {\n    //     let user = localStorage.getItem('user-info');\n    //     if (!user) {\n    //         // Using name in router file\n    //         this.redirectTo({ val: 'sign-up' });\n    //     } else {\n    //         this.userId = JSON.parse(user).id;\n    //         this.userName = JSON.parse(user).name;\n    //         this.isLoggedInUser();\n    //         this.displayAllCategories({\n    //             userIdIs: this.userId,\n    //             locationIdIs: this.locationId\n    //         });\n    //         this.canUserAccessThisLocation({\n    //             userIdIs: this.userId,\n    //             locationIdIs: this.locationId,\n    //             redirectToPage: \"home\",\n    //         });\n    //         this.getLocationInfo(this.userId, this.locationId);\n    //     }\n    // },\n\n    methods: {\n        ...mapMutations([\n            \"isLoggedInUser\",\n            \"displayAllCategories\",\n            \"canUserAccessThisLocation\"\n        ]),\n        ...mapActions(['redirectTo']),\n        async getLocationInfo(userId, locId) {\n            let result = await axios.get(`http://localhost:3000/locations?userId=${userId}&id=${locId}`);\n            let locDetails = [];\n            if (result.status == 200) {\n                locDetails = result.data;\n                if (locDetails.length>0) {\n                    this.locName = locDetails[0].name;\n                    this.locAddress = locDetails[0].address;\n                }\n            }\n        },\n        async addNewItem() {\n\n            // Activate Validation\n            this.v$.$validate();\n\n            if (!this.v$.$error) {\n\n                let result = await axios.post(`http://localhost:3000/items`, {\n                    name: this.itemName,\n                    // \"17.00\"\n                    price: parseFloat(this.itemPrice).toFixed(2),\n                    qty: parseInt(this.itemsQty),\n                    description: this.description,\n                    catId: this.pickedCategory,\n                    locId: parseInt(this.locationId),\n                    userId: this.userId,\n                });\n\n                if (result.status == 201) {\n\n                    this.errorMessage = '';\n                    this.successMessage = 'Added New Item';\n\n                    setTimeout(() => {\n                        this.$router.push({ name: \"menu\", params: { locationId: this.locationId }});\n                    }, 2000);\n\n                } else {\n                    this.successMessage = '';\n                    this.errorMessage = 'Something went wrong, Try Again';\n                }\n            } \n\n            else {\n                this.successMessage = '';\n                this.errorMessage = 'You must fill in all required fields';\n            }\n\n        },\n    },\n\n}\n\n</script>\n\n<style lang=\"scss\" scoped></style>"],"mappings":";AAyGA,OAAOA,MAAK,MAAO,gCAAgC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe;EAEXC,IAAI,EAAE,YAAY;EAElBC,UAAU,EAAE;IACRF;EACJ,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAG,OAAO,EAAE;IACL,GAAGC,YAAY,CAAC,CACZ,gBAAgB,EAChB,sBAAsB,EACtB,2BAA0B,CAC7B,CAAC;IACF,GAAGC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC;IAC7B,MAAMC,eAAeA,CAACC,MAAM,EAAEC,KAAK,EAAE;MACjC,IAAIC,MAAK,GAAI,MAAMC,KAAK,CAACC,GAAG,CAAE,0CAAyCJ,MAAO,OAAMC,KAAM,EAAC,CAAC;MAC5F,IAAII,UAAS,GAAI,EAAE;MACnB,IAAIH,MAAM,CAACI,MAAK,IAAK,GAAG,EAAE;QACtBD,UAAS,GAAIH,MAAM,CAACK,IAAI;QACxB,IAAIF,UAAU,CAACG,MAAM,GAAC,CAAC,EAAE;UACrB,IAAI,CAACC,OAAM,GAAIJ,UAAU,CAAC,CAAC,CAAC,CAACX,IAAI;UACjC,IAAI,CAACgB,UAAS,GAAIL,UAAU,CAAC,CAAC,CAAC,CAACM,OAAO;QAC3C;MACJ;IACJ,CAAC;IACD,MAAMC,UAAUA,CAAA,EAAG;MAEf;MACA,IAAI,CAACC,EAAE,CAACC,SAAS,CAAC,CAAC;MAEnB,IAAI,CAAC,IAAI,CAACD,EAAE,CAACE,MAAM,EAAE;QAEjB,IAAIb,MAAK,GAAI,MAAMC,KAAK,CAACa,IAAI,CAAE,6BAA4B,EAAE;UACzDtB,IAAI,EAAE,IAAI,CAACuB,QAAQ;UACnB;UACAC,KAAK,EAAEC,UAAU,CAAC,IAAI,CAACC,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;UAC5CC,GAAG,EAAEC,QAAQ,CAAC,IAAI,CAACC,QAAQ,CAAC;UAC5BC,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BC,KAAK,EAAE,IAAI,CAACC,cAAc;UAC1B1B,KAAK,EAAEsB,QAAQ,CAAC,IAAI,CAACK,UAAU,CAAC;UAChC5B,MAAM,EAAE,IAAI,CAACA;QACjB,CAAC,CAAC;QAEF,IAAIE,MAAM,CAACI,MAAK,IAAK,GAAG,EAAE;UAEtB,IAAI,CAACuB,YAAW,GAAI,EAAE;UACtB,IAAI,CAACC,cAAa,GAAI,gBAAgB;UAEtCC,UAAU,CAAC,MAAM;YACb,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;cAAEvC,IAAI,EAAE,MAAM;cAAEwC,MAAM,EAAE;gBAAEN,UAAU,EAAE,IAAI,CAACA;cAAW;YAAC,CAAC,CAAC;UAC/E,CAAC,EAAE,IAAI,CAAC;QAEZ,OAAO;UACH,IAAI,CAACE,cAAa,GAAI,EAAE;UACxB,IAAI,CAACD,YAAW,GAAI,iCAAiC;QACzD;MACJ,OAEK;QACD,IAAI,CAACC,cAAa,GAAI,EAAE;QACxB,IAAI,CAACD,YAAW,GAAI,sCAAsC;MAC9D;IAEJ;EACJ;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}